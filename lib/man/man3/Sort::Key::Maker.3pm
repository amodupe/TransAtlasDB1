.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sort::Key::Maker 3"
.TH Sort::Key::Maker 3 "2014-04-29" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sort::Key::Maker \- multi\-key sorter creator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # create a function that sorts strings by length:
\&  use Sort::Key::Maker sort_by_length => sub { length $_},  qw(integer);
\&
\&  # create a multi\-key sort function;
\&  # first key is integer sorted in descending order,
\&  # second key is a string in default (ascending) order:
\&  use Sort::Key::Maker ri_s_keysort => qw(\-integer string);
\&
\&  # some sample data...
\&  my @foo = qw(foo bar t too tood mama);
\&
\&  # and now, use the sorter functions previously made:
\&
\&  # get the values on @foo sorted by length:
\&  my @sorted = sort_by_length @foo;
\&
\&  # sort @foo inplace by its length and then by its value:
\&  ri_s_keysort_inplace { length $_, $_ } @foo;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sort::Key::Maker is a pragmatic module that provides an easy to use
interface to Sort::Key multi-key sorting functionality.
.PP
It creates multi-key sorting functions on the fly for any key type
combination and exports them to the caller package.
.PP
The key types natively accepted are:
.PP
.Vb 2
\&  string, str, locale, loc, integer, int,
\&  unsigned_integer, uint, number, num
.Ve
.PP
and support for other types can be added via Sort::Key::Register (or
also via \fISort::Key::register_type()\fR).
.SS "\s-1USAGE\s0"
.IX Subsection "USAGE"
.ie n .IP "use Sort::Key::Maker foo_sort => @keys;" 4
.el .IP "use Sort::Key::Maker foo_sort => \f(CW@keys\fR;" 4
.IX Item "use Sort::Key::Maker foo_sort => @keys;"
exports two subroutines to the caller package: \f(CW\*(C`foo_sort (&@)\*(C'\fR and
\&\f(CW\*(C`foo_sort_inplace (&\e@)\*(C'\fR.
.Sp
Those two subroutines require a sub reference as their first argument
and then respectively, the list to be sorted or an array.
.Sp
For instance:
.Sp
.Vb 1
\&  use Sort::Key::Maker bar_sort => qw(int int str);
\&
\&  @bar=qw(doo tomo 45s tio);
\&  @sorted = bar_sort { unpack "CCs", $_ } @bar;
\&  # or sorting @bar inplace
\&  bar_sort_inplace { unpack "CCs", $_ } @bar;
.Ve
.ie n .IP "use Sort::Key::Maker foo_sort => \e&genmultikey, @keys;" 4
.el .IP "use Sort::Key::Maker foo_sort => \e&genmultikey, \f(CW@keys\fR;" 4
.IX Item "use Sort::Key::Maker foo_sort => &genmultikey, @keys;"
when the first argument after the sorter name is a reference to a
subroutine it is used as the multi-key extraction function. The
generated sorter functions doesn't require neither accept one, i.e.:
.Sp
.Vb 2
\&  use Sort::Key::Maker sort_by_length => sub { length $_ }, \*(Aqint\*(Aq;
\&  my @sorted = sort_by_length qw(foo goo h mama picasso);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sort::Key, Sort::Key::Register.
.PP
Sort::Maker also available from \s-1CPAN\s0 provides similar
functionality.
.SH "AUTHOR"
.IX Header "AUTHOR"
Salvador Fandin\*~o, <sfandino@yahoo.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005, 2014 by Salvador Fandin\*~o
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.
